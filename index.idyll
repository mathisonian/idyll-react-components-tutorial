[meta title:"Idyll Custom Components" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"WIP: Idyll Custom Components"
  subtitle:"Creating your own custom components in Idyll"
  author:"Alan Tan"
  authorLink:"https://github.com/tanalan"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
/]

## Introduction

Idyll is already rich with many [built-it](https://idyll-lang.org/docs/components) components.
This article serves as a tutorial for writing your own custom components (in React)
in Idyll, and is an extension to Idyll's [current docs](https://idyll-lang.org/docs/components/custom) with custom components.

**TODO** This article assumes basic knowledge from Idyll's docs. (Wording?).

Since Idyll components are React components under the hood, it may be good to be familiar with the basics of React.
Their [docs](https://reactjs.org/docs/getting-started.html) are well documented, and serve as a great starting point for learning React.


> Idyll posts are designed to support interaction and data-driven graphics.

I will focus on creating a (basic?) custom component emphasizes Idyll's interaction functionality, and ....??? TODO

## Core custom component ideas

Very important to an Idyll document's interactivity is its interaction with **variables**. This is important for
writing custom components that have interactivity with users, as well as other components.

## Writing custom components

In Idyll, a variable can be *binded* to a component's property (`prop`). If this variable value is updated, all
components with a bind to this variable also updates!
[br /]
In particular, for all custom components, Idyll injects an `updateProps`
method into the `props` object of a custom component. We pass our variables
into a custom component's `props`, and the component can `updateProps`, which
facilitate interaction, because these same variables' updated values will affect its other components!
[br/]
This is very powerful.

I demonstrate this by interacting with a small basic custom component, `TwoColors`.
Try clicking on a colored section below, and notice how the color selected text changes.

[var name:"theCurrentColor" value:undefined /]
[TwoColors currentColor:theCurrentColor /]

The color clicked is [Display value:`theCurrentColor ? theCurrentColor : "not yet chosen"` /]

The code for the above interaction is as follows:

```
[var name:"theCurrentColor" value:undefined /]
[TwoColors currentColor:theCurrentColor /]
// Scroll to see rest of code 
The color selected is [Display value:`theCurrentColor ? theCurrentColor : "not yet chosen"` /]
```

I define a `var` called `theCurrentColor`, and bind this to both `TwoColor`'s `currentColor` prop, and `Display`'s
`value` prop.

This `TwoColors` custom component is defined in my `components/` folder:

```
import React from 'react';

class TwoColors extends React.PureComponent {
  constructor(props) {
    super(props);

    this.changePropsColor = this.changePropsColor.bind(this);
  }

  changePropsColor(color) {
    this.props.updateProps({
      currentColor: color
    });
  }

  render() {
    return (
      <div>
        <div
          style={{backgroundColor: 'green'}}
          onClick={() => this.changePropsColor('green')}
        >
         Green 
        </div>
        <div 
          style={{backgroundColor: 'orange'}}
          onClick={() => this.changePropsColor('orange')}
        >
          Orange
        </div>
      </div>
    );
  }
}

export default TwoColors;
```

Notice in `TwoColors` how it `updatesProps` of `currentColor`
to the respective color after clicking on a div. The `currentColor`
prop is binded to our `theCurrentColor` var, and as such, `Display` is updated when we update the var.

As shown, the binding of `var`s to a custom component's `props` is core to Idyll's interactivity!

## A custom budget component

TODO showing a more complex and useful example that shows data.

A budgeter bar where the user interacts by having a budget amount, and adding spendings that will change how the bar looks.
This way, they can get a visualization of how much of their budget is going into what category.

[Budgeter /]
